rm( list= ls())
# load required packages
require( plyr )   # version 1.8
require( lme4 )   # version 1.16
require( bbmle )  # version 1.0.5.2
require( MCMCglmm )   # version 2.17
require( VGAM )   # version 0.9-1
require( effects )  # version 2.2-4
# function to mean-standardize covariance matrices
StanCovMat <- function( X, X_means ) {
X / ( X_means %*% t(X_means) )
}
# function for including correlations on the pairs plots
panel.cor <- function(x, y, digits=2) {
r <- cor(x, y, use="complete")
par( usr =c(0, 1, 0, 1))
Cor <- format(c(r, 0.123456789), digits=digits)[1]
text(0.5, 0.5, paste("r=", Cor), cex=1.5)
}
# function to apply the folded normal distribution
FoldedNormal <- function( X ) {
X.means <- apply( X, 2, mean )
X.sd 	<- apply( X, 2, sd )
X.dim	<- apply( X, 2, length )
fn.X 	<- matrix( NA, nrow=dim(X)[1], ncol=dim(X)[2] )
for( i in 1:dim(X)[2] ) {
fn.X[,i] <- rfnorm( X.dim[i], X.means[i], X.sd[i]) }
fn.X
}
# 'apply'-able HPDinterval function
hpd <- function( X ) {
HPDinterval( as.mcmc( X ), probs=c(0.025, 0.975) )[1:2]
}
# mode (central tendency, not data-storage type) function
Mode <- function( x ) {
ux <- unique( x )
ux[ which.max( tabulate( match( x, ux))) ]
}
setwd( "..//Data" )
load( file="covariance_matrix_list.R" )
no.mats <- length( matrix_list )    # building empty variables for each metric
END <- numeric(no.mats)
TGV <- numeric(no.mats)
Emax <- numeric(no.mats)
gmax <- numeric(no.mats)
AEvo <- numeric(no.mats)
Even <- numeric(no.mats)
# this loop reads each matrix, calculates each metric and writes them to the empty vectors above
for (i in 1:no.mats) {
matrix.and.means <- as.matrix( matrix_list[[i]] )
means <- matrix.and.means[,1]
matrix <- matrix.and.means[,2:ncol(matrix.and.means)]
if ( sum(means)==0 ) { st.matrix <- matrix }
else { st.matrix <- StanCovMat( as.matrix(matrix), means ) }
diag.matrix <- svd( st.matrix )
eigen.values <- diag.matrix$d
TGV[i] <- sum(eigen.values)   # 'total genetic varaince' after Kirkpatrick 2008
END[i] <- sum(eigen.values / eigen.values[1])   # 'effective no. dimensions' after Kirkpatrick 2008
Emax[i] <- sqrt(eigen.values[1])    # 'maximum evolvability' after Kirkpatrick 2008
gmax[i] <- eigen.values[1]      # storing gmax; the first eigenvalue
AEvo[i] <- mean( eigen.values )     # 'average evolvability' after Hansen & Houle 2008
lamda_tilde <- abs(eigen.values) / sum( abs(eigen.values) )
Even[i] <- - sum( lamda_tilde*log(lamda_tilde) / log( length(eigen.values) ) )  # 'eigenvalue eveness' after Agrawal & Stinchcombe 2008 (though note that they intended this metric to be calculated from correlation matrices. see below)
}
Metrics <- data.frame( TGV, END, Emax, gmax, AEvo, Even )
matrices_names <- sub( ".csv", "", names( matrix_list ))
Metrics$filename <- factor( matrices_names )
# str(Metrics)
# now to read in the csv that holds the ID table
Index <- read.csv("MatrixIndexFinal.csv")
# str(Index)
# merge the metrics with the index
gmats <- merge(Metrics, Index, "filename")
# str(gmats)
# dump columns we don't need for analysis
gmats <- gmats[, c(-10, -17)]
# remove 2 matrices from Sherrard.et.al.2009 & 1 from House&Simmons because values seem unbelievable
gmats <- gmats[ -c(59,83,84),]
plot( gmats$AEvo ) ; # identify( gmats$AEvo )
gmats[c(27,28,29,30,68,69,70),]
# these unusually large AEvo/Emax values are from 2 studies: Blo2003 & Mer1996
# Mer1996 values are correct as published
# Blo2003 excluded because I can't work out exactly what they did (Blows!)
gmats <- gmats[ gmats$study.code !="Blo2003",]
# here we're going to exclude those matrices whose component traits comprise awkward units e.g. mm^2 or cm^3
# NB: after all the previous data fisking this removes precisely nothing
gmats[ gmats$problem.units =="Y" ,]
dim( gmats )  # 81 matrices after PDF
ddply( gmats, .(taxon2, trait.type), summarise, m_TGV= round(mean(TGV), 3), m_END= round(mean(END), 3), m_Emax= round(mean(Emax), 3), m_Even= round(mean(Even), 3), m_AEvo= round(mean(AEvo), 3), m_Trait.no= round( mean(trait.no), 2), no.rows= length(TGV), m_no.families= round( mean(na.omit( no.families)), 1) )
# information for metric correlation table
round( cor( gmats[,c(2:7, 14)] ), 2)
round( cor( na.omit( gmats[,c(2:7, 14, 18)] )), 2)
# pairs figure for covariance matrices
names( gmats[,c(2:7, 14)] )
metric.names <- expression( italic("tgv"),
italic("n"["D"]),
italic("e"["max"]),
italic(bolditalic("g")["max"]),
italic("\u0113"),
italic("E"["\u03bb"]),
italic("n") )
pairs( gmats[,c(2:7, 14)], cex.labels=2, labels=metric.names, lower.panel=panel.cor )
EMAX.reml1 <- lmer(Emax ~ 1 + trait.type + taxon2 + trait.no + (1|study.code), data=gmats)
EMAX.reml2 <- lmer(Emax ~ 1 + trait.type * taxon2 + trait.no + (1|study.code), data=gmats)
EMAX.reml3 <- lmer(Emax ~ 1 + trait.type + taxon2 + trait.no + (1|study.code) + (1|species), data=gmats)
EMAX.reml4 <- lmer(Emax ~ 1 + trait.type * taxon2 + trait.no + (1|study.code) + (1|species), data=gmats)
BICtab( EMAX.reml1, EMAX.reml2, EMAX.reml3, EMAX.reml4, weights=T, nobs=nrow(gmats) )
LikRatioSim <- function( mod ) {
y.sim <- simulate(mod, nsim = 1)  # one set of simulated data
model.lower <- lmer(y.sim$sim_1 ~ 1 + trait.type + taxon2 + trait.no + (1|study.code), data=gmats)
model.full  <- lmer(y.sim$sim_1 ~ 1 + trait.type * taxon2 + trait.no + (1|study.code), data=gmats)
LRSim <-  -as.numeric(deviance(model.full) - deviance(model.lower))
return(LRSim)
rm(y.sim, model.lower, model.full, LRSim)
}
LikRatParBoot <- replicate(n = 10, LikRatioSim( EMAX.reml1 ))
LR.model <- -as.numeric(deviance( EMAX.reml2 ) - deviance( EMAX.reml1 ))
mean(c((LikRatParBoot > LR.model), 1))
LikRatParBoot <- replicate(n = 1000, LikRatioSim( EMAX.reml1 ))
LR.model <- -as.numeric(deviance( EMAX.reml2 ) - deviance( EMAX.reml1 ))
mean(c((LikRatParBoot > LR.model), 1))
LikRatioSim <- function( mod ) {
y.sim <- simulate(mod, nsim = 1)  # one set of simulated data
model.lower <- lmer(y.sim$sim_1 ~ 1 + trait.type + taxon2 + trait.no + (1|study.code), data=gmats)
model.full  <- lmer(y.sim$sim_1 ~ 1 + trait.type + taxon2 + trait.no + (1|study.code) + (1|species), data=gmats)
LRSim <-  -as.numeric(deviance(model.full) - deviance(model.lower))
return(LRSim)
rm(y.sim, model.lower, model.full, LRSim)
}
LikRatParBoot <- replicate(n = 1000, LikRatioSim( EMAX.reml1 ))
LR.model <- -as.numeric(deviance( EMAX.reml3 ) - deviance( EMAX.reml1 ))
mean(c((LikRatParBoot > LR.model), 1))
getwd()
load( file="correlation_matrix_list.R" )
rm( list= ls())
# load required packages
require( plyr )   # version 1.8
require( lme4 )   # version 1.16
require( bbmle )  # version 1.0.5.2
require( MCMCglmm )   # version 2.17
require( VGAM )   # version 0.9-1
require( effects )  # version 2.2-4
# function to mean-standardize covariance matrices
StanCovMat <- function( X, X_means ) {
X / ( X_means %*% t(X_means) )
}
# function for including correlations on the pairs plots
panel.cor <- function(x, y, digits=2) {
r <- cor(x, y, use="complete")
par( usr =c(0, 1, 0, 1))
Cor <- format(c(r, 0.123456789), digits=digits)[1]
text(0.5, 0.5, paste("r=", Cor), cex=1.5)
}
# function to apply the folded normal distribution
FoldedNormal <- function( X ) {
X.means <- apply( X, 2, mean )
X.sd 	<- apply( X, 2, sd )
X.dim	<- apply( X, 2, length )
fn.X 	<- matrix( NA, nrow=dim(X)[1], ncol=dim(X)[2] )
for( i in 1:dim(X)[2] ) {
fn.X[,i] <- rfnorm( X.dim[i], X.means[i], X.sd[i]) }
fn.X
}
# 'apply'-able HPDinterval function
hpd <- function( X ) {
HPDinterval( as.mcmc( X ), probs=c(0.025, 0.975) )[1:2]
}
# mode (central tendency, not data-storage type) function
Mode <- function( x ) {
ux <- unique( x )
ux[ which.max( tabulate( match( x, ux))) ]
}
setwd( "..//Data" )
load( file="covariance_matrix_list.R" )
no.mats <- length( matrix_list )    # building empty variables for each metric
END <- numeric(no.mats)
TGV <- numeric(no.mats)
Emax <- numeric(no.mats)
gmax <- numeric(no.mats)
AEvo <- numeric(no.mats)
Even <- numeric(no.mats)
# this loop reads each matrix, calculates each metric and writes them to the empty vectors above
for (i in 1:no.mats) {
matrix.and.means <- as.matrix( matrix_list[[i]] )
means <- matrix.and.means[,1]
matrix <- matrix.and.means[,2:ncol(matrix.and.means)]
if ( sum(means)==0 ) { st.matrix <- matrix }
else { st.matrix <- StanCovMat( as.matrix(matrix), means ) }
diag.matrix <- svd( st.matrix )
eigen.values <- diag.matrix$d
TGV[i] <- sum(eigen.values)   # 'total genetic varaince' after Kirkpatrick 2008
END[i] <- sum(eigen.values / eigen.values[1])   # 'effective no. dimensions' after Kirkpatrick 2008
Emax[i] <- sqrt(eigen.values[1])    # 'maximum evolvability' after Kirkpatrick 2008
gmax[i] <- eigen.values[1]      # storing gmax; the first eigenvalue
AEvo[i] <- mean( eigen.values )     # 'average evolvability' after Hansen & Houle 2008
lamda_tilde <- abs(eigen.values) / sum( abs(eigen.values) )
Even[i] <- - sum( lamda_tilde*log(lamda_tilde) / log( length(eigen.values) ) )  # 'eigenvalue eveness' after Agrawal & Stinchcombe 2008 (though note that they intended this metric to be calculated from correlation matrices. see below)
}
Metrics <- data.frame( TGV, END, Emax, gmax, AEvo, Even )
matrices_names <- sub( ".csv", "", names( matrix_list ))
Metrics$filename <- factor( matrices_names )
# str(Metrics)
# now to read in the csv that holds the ID table
Index <- read.csv("MatrixIndexFinal.csv")
# str(Index)
# merge the metrics with the index
gmats <- merge(Metrics, Index, "filename")
# str(gmats)
# dump columns we don't need for analysis
gmats <- gmats[, c(-10, -17)]
# remove 2 matrices from Sherrard.et.al.2009 & 1 from House&Simmons because values seem unbelievable
gmats <- gmats[ -c(59,83,84),]
plot( gmats$AEvo ) ; # identify( gmats$AEvo )
gmats[c(27,28,29,30,68,69,70),]
# these unusually large AEvo/Emax values are from 2 studies: Blo2003 & Mer1996
# Mer1996 values are correct as published
# Blo2003 excluded because I can't work out exactly what they did (Blows!)
gmats <- gmats[ gmats$study.code !="Blo2003",]
# here we're going to exclude those matrices whose component traits comprise awkward units e.g. mm^2 or cm^3
# NB: after all the previous data fisking this removes precisely nothing
gmats[ gmats$problem.units =="Y" ,]
dim( gmats )  # 81 matrices after PDF
load( file="correlation_matrix_list.R" )
no.mats <- length( cor_matrix_list )
REV <- numeric(no.mats)   # allocating empty variables for the
Even <- numeric(no.mats)
Evar <- numeric(no.mats)
gmax <- numeric(no.mats)
for (i in 1:no.mats) {
cor.matrix <- as.matrix( cor_matrix_list[[i]])
diag.matrix <- svd( cor.matrix )
eigen.values <- diag.matrix$d
gmax[i] <- eigen.values[1]    # gmax - the principal eigenvalue
Evar[i] <- sum( (eigen.values - 1 )^2 ) / length(eigen.values)    # 'eigenvalue variance' following Pavlicev et al 2009
REV[i] <- Evar[i] / ( length(eigen.values) -1 )   # 'relative eigenvalue variance' following Pavlicev et al 2009
lamda_tilde <- abs(eigen.values) / sum( abs(eigen.values) )
Even[i] <- - sum( lamda_tilde*log(lamda_tilde) / log( length(eigen.values) ) )    # 'eigenvalue eveness' after Agrawal & Stinchcombe 2008
}
cor_matrices_names <- sub( ".csv", "", names( cor_matrix_list ))
REV.mats <- data.frame( REV, Even, Evar, gmax, cor_matrices_names )
REV.mats$filename <- factor( cor_matrices_names )
# reading in the csv that holds the ID table (this may still be in memory, but just in case you didn't start from line 1 )
Index <- read.csv("MatrixIndexFinal.csv")
# str(Index)
# merge the metrics with the index
g.cor <- merge( Index, REV.mats, "filename" )
# str(g.cor)
# remove uneeded columns
g.cor <- g.cor[, -c(11, 12, 19)]

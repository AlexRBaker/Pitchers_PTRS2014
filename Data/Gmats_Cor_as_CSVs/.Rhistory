rm( list= ls())#
#
# load required packages#
source( "~/Dropbox/DworkinLabSharedMaterial/WRP_FUNCTIONS.R" )#
require( plyr )#
require( lme4 )#
require( bbmle )#
require( MCMCglmm )#
require( VGAM )#
require( effects )#
#
# function to mean-standardize covariance matrices#
StanCovMat <- function( X, X_means ) {#
	X / ( X_means %*% t(X_means) )#
}#
#
# function for including correlations on the pairs plots#
panel.cor <- function(x, y, digits=2) {#
	r <- cor(x, y)#
	par( usr =c(0, 1, 0, 1))#
	Cor <- format(c(r, 0.123456789), digits=digits)[1]#
 	text(0.5, 0.5, paste("r=", Cor), cex=1.5)#
}#
# function to apply the folded normal distribution#
FoldedNormal <- function( X ) {#
	X.means <- apply( X, 2, mean )#
	X.sd 	<- apply( X, 2, sd )#
	X.dim	<- apply( X, 2, length )#
	fn.X 	<- matrix( NA, nrow=dim(X)[1], ncol=dim(X)[2] ) #
	for( i in 1:dim(X)[2] ) {#
		fn.X[,i] <- rfnorm( X.dim[i], X.means[i], X.sd[i]) }#
	fn.X#
}#
setwd("/Users/Will/Documents/=WORK=/BreedersEquationReview/Gmats_&_means_as_CSVs")#
#
matrices <- dir()#
no.mats <- length(matrices)#
#
END <- numeric(no.mats)#
TGV <- numeric(no.mats)#
Emax <- numeric(no.mats)#
Gmax <- numeric(no.mats)#
AEvo <- numeric(no.mats)#
Even <- numeric(no.mats)#
matdim <- numeric(no.mats)#
#
# this loop reads each matrix, calculates each metric and writes them to the empty vectors above#
for (i in 1:no.mats) {#
	matrix.and.means <- as.matrix(read.csv(matrices[i]))#
	print( matrices[i] )#
	means <- matrix.and.means[,1]#
	matrix <- matrix.and.means[,2:ncol(matrix.and.means)]#
	if ( sum(means)==0 ) { st.matrix <- matrix }#
	else { st.matrix <- StanCovMat( as.matrix(matrix), means ) }#
	diag.matrix <- svd( st.matrix )#
	eigen.values <- diag.matrix$d#
	TGV[i] <- sum(eigen.values)#
	END[i] <- sum(eigen.values / eigen.values[1])#
	Emax[i] <- sqrt(eigen.values[1])#
	Gmax[i] <- eigen.values[1]#
	AEvo[i] <- mean( eigen.values )#
	lamda_tilde <- abs(eigen.values) / sum( abs(eigen.values) )#
	Even[i] <- - sum( lamda_tilde*log(lamda_tilde) / log( length(eigen.values) ) )#
	matdim[i] <- length(eigen.values)#
	}#
# check that the cbind hasn't fucked shit up as it did with g.cor#
Metrics <- data.frame( TGV, END, Emax, Gmax, AEvo, Even, matdim ) #
matrices.names <- sub(".csv", "", matrices)#
Metrics$filename <- factor(matrices.names)#
str(Metrics)
rm( list= ls())#
#
# load required packages#
source( "~/Dropbox/DworkinLabSharedMaterial/WRP_FUNCTIONS.R" )#
require( plyr )#
require( lme4 )#
require( bbmle )#
require( MCMCglmm )#
require( VGAM )#
require( effects )#
#
# function to mean-standardize covariance matrices#
StanCovMat <- function( X, X_means ) {#
	X / ( X_means %*% t(X_means) )#
}#
#
# function for including correlations on the pairs plots#
panel.cor <- function(x, y, digits=2) {#
	r <- cor(x, y)#
	par( usr =c(0, 1, 0, 1))#
	Cor <- format(c(r, 0.123456789), digits=digits)[1]#
 	text(0.5, 0.5, paste("r=", Cor), cex=1.5)#
}#
# function to apply the folded normal distribution#
FoldedNormal <- function( X ) {#
	X.means <- apply( X, 2, mean )#
	X.sd 	<- apply( X, 2, sd )#
	X.dim	<- apply( X, 2, length )#
	fn.X 	<- matrix( NA, nrow=dim(X)[1], ncol=dim(X)[2] ) #
	for( i in 1:dim(X)[2] ) {#
		fn.X[,i] <- rfnorm( X.dim[i], X.means[i], X.sd[i]) }#
	fn.X#
}#
setwd("/Users/Will/Documents/=WORK=/BreedersEquationReview/Gmats_&_means_as_CSVs")#
#
matrices <- dir()#
no.mats <- length(matrices)#
#
END <- numeric(no.mats)#
TGV <- numeric(no.mats)#
Emax <- numeric(no.mats)#
Gmax <- numeric(no.mats)#
AEvo <- numeric(no.mats)#
Even <- numeric(no.mats)#
matdim <- numeric(no.mats)#
#
# this loop reads each matrix, calculates each metric and writes them to the empty vectors above#
for (i in 1:no.mats) {#
	matrix.and.means <- as.matrix(read.csv(matrices[i]))#
	print( matrices[i] )#
	means <- matrix.and.means[,1]#
	matrix <- matrix.and.means[,2:ncol(matrix.and.means)]#
	if ( sum(means)==0 ) { st.matrix <- matrix }#
	else { st.matrix <- StanCovMat( as.matrix(matrix), means ) }#
	diag.matrix <- svd( st.matrix )#
	eigen.values <- diag.matrix$d#
	TGV[i] <- sum(eigen.values)#
	END[i] <- sum(eigen.values / eigen.values[1])#
	Emax[i] <- sqrt(eigen.values[1])#
	Gmax[i] <- eigen.values[1]#
	AEvo[i] <- mean( eigen.values )#
	lamda_tilde <- abs(eigen.values) / sum( abs(eigen.values) )#
	Even[i] <- - sum( lamda_tilde*log(lamda_tilde) / log( length(eigen.values) ) )#
	matdim[i] <- length(eigen.values)#
	}#
# check that the cbind hasn't fucked shit up as it did with g.cor#
Metrics <- data.frame( TGV, END, Emax, Gmax, AEvo, Even, matdim ) #
matrices.names <- sub(".csv", "", matrices)#
Metrics$filename <- factor(matrices.names)#
str(Metrics)#
# now to read in the csv that holds the ID table#
# setwd("/Users/Will/Documents/=WORK=/BreedersEquationReview")#
setwd( "~/Dropbox/WillPitchers/GmaxReview/PTRS_resub/" )#
#
Index <- read.csv("MatrixIndex4.csv")#
str(Index)#
#
# merge the metrics with the index#
gmax <- merge(Metrics, Index, "filename")#
gmax$trait.no <- gmax$matdim#
str(gmax)#
#
# dump columns we don't need for analysis#
gmax <- gmax[, c(-8, -18, -19)]#
#
dim(gmax)	# 88 matrices
gmax <- gmax[ -c(59,83,84),]
gmax <- gmax[ gmax$study.code !="Blo2003",]#
#
# here we're going to exclude those matrices whose component traits comprise awkward units e.g. mm^2 or cm^3#
# NB: after all the previous data fisking this removes precisely nothing#
gmax[ gmax$problem.units =="Y" ,]#
#
dim( gmax )	# 81 matrices after PDF
END.Bayes1 <- MCMCglmm(END ~ 1 + trait.type + taxon2 + trait.no, nitt=100000, burnin=5000, thin=30, data=gmax, verbose=F, random= ~ study.code, prior= myprior1 )
myprior1 <- list(R = list(V =1, nu = 0.002), G= list( G1= list (V=1, nu=0.002)))#
#
myprior2 <- list(R = list(V =1, nu = 0.002), G= list( G1= list (V=1, nu=0.002), G2= list (V=1, nu=0.002)))#
#
myprior3 <- list( list(V=1, nu=0.002), list( G1=list(V=1, nu=0.002), G2=list(V=1, nu=0.002), G3=list(V=1, nu=0.002) ) )
END.Bayes1 <- MCMCglmm(END ~ 1 + trait.type + taxon2 + trait.no, nitt=100000, burnin=5000, thin=30, data=gmax, verbose=F, random= ~ study.code, prior= myprior1 )
END.estimates <- cbind( END.Bayes1$Sol[,1],#
				( END.Bayes1$Sol[,1] + END.Bayes1$Sol[,2] ),#
				( END.Bayes1$Sol[,1] + END.Bayes1$Sol[,3] ),#
				( END.Bayes1$Sol[,1] + END.Bayes1$Sol[,4] ),#
				( END.Bayes1$Sol[,1] + END.Bayes1$Sol[,2] + END.Bayes1$Sol[,4] ),#
				 ( END.Bayes1$Sol[,1] + END.Bayes1$Sol[,3] + END.Bayes1$Sol[,4] ) )#
#
END.estimates <- FoldedNormal( END.estimates )#
#
# Tabulate estimates#
apply( END.estimates, 2, mean )#
apply( END.estimates, 2, Mode )#
apply( END.estimates, 2, hpd )
END.Bayes0 <- MCMCglmm(END ~ 1, nitt=1000000, burnin=5000, thin=30, data=gmax, verbose=F, random= ~ study.code, prior= myprior1 )#
summary(END.Bayes0)$solutions
ENDB0 <- rfnorm( dim(END.Bayes0$Sol)[1], mean(END.Bayes0$Sol[,1]), sd(END.Bayes0$Sol[,1]) )#
mean( ENDB0 )	;	hpd( ENDB0 ) ; Mode( ENDB0 )
EMAX.Bayes3 <- MCMCglmm(Emax ~ 1 + trait.type + taxon2 + trait.no, nitt=100000, burnin=5000, thin=30, data=gmax, verbose=F, random= ~ idh(trait.type):study.code + species, prior= myprior3 )
EMAX.estimates <- cbind( EMAX.Bayes3$Sol[,1],#
				( EMAX.Bayes3$Sol[,1] + EMAX.Bayes3$Sol[,2] ),#
				( EMAX.Bayes3$Sol[,1] + EMAX.Bayes3$Sol[,3] ),#
				( EMAX.Bayes3$Sol[,1] + EMAX.Bayes3$Sol[,4] ),#
				( EMAX.Bayes3$Sol[,1] + EMAX.Bayes3$Sol[,2] + EMAX.Bayes3$Sol[,4] ),#
				( EMAX.Bayes3$Sol[,1] + EMAX.Bayes3$Sol[,3] + EMAX.Bayes3$Sol[,4] ) )#
#
colnames(EMAX.estimates) <- c('A.LH','A.M','A.S','P.LH','P.M','P.S')#
#
EMAX.estimates <- FoldedNormal( EMAX.estimates )#
#
apply( EMAX.estimates, 2, mean )#
apply( EMAX.estimates, 2, Mode )#
apply( EMAX.estimates, 2, hpd )
EMAX.Bayes0 <- MCMCglmm(Emax ~ 1, nitt=100000, burnin=10000, thin=30, data=gmax, verbose=F, random= ~ idh(trait.type):study.code + species, prior= myprior3 )#
summary( EMAX.Bayes0 )$solutions#
            # post.mean  l-95% CI u-95% CI eff.samp        pMCMC#
# (Intercept) 0.6067565 0.2490954 0.962691     3000 0.0003333333#
#
EMAXB0 <- rfnorm(3000, mean(EMAX.Bayes0$Sol[,1]), sd(EMAX.Bayes0$Sol[,1]))#
mean( EMAXB0 )	;	hpd( EMAXB0 ) 	 ;	  Mode( EMAXB0 )
TGV.Bayes0 <- MCMCglmm(TGV ~ 1, nitt=500000, burnin=1000, thin=30, data=gmax, verbose=F, random= ~ idh(trait.type):study.code + species, prior= myprior3 )#
summary( TGV.Bayes0 )$solutions#
            # post.mean  l-95% CI u-95% CI eff.samp     pMCMC#
# (Intercept)  1454.607 -4952.952 7797.321    16634 0.6548034#
#
TGVB0 <- rfnorm( length( TGV.Bayes0$Sol[,1] ), mean( TGV.Bayes0$Sol[,1] ), sd( TGV.Bayes0$Sol[,1] ) )#
mean( TGVB0 )	;	hpd( TGVB0 ) 		 ;	 Mode( TGVB0 )
TGV.Bayes3 <- MCMCglmm(TGV ~ 1 + trait.type + taxon2 + trait.no, nitt=100000, burnin=5000, thin=30, data=gmax, verbose=F, random= ~ idh(trait.type):study.code + species, prior= myprior3 )
TGV.estimates <- cbind( TGV.Bayes3$Sol[,1],#
				( TGV.Bayes3$Sol[,1] + TGV.Bayes3$Sol[,2] ),#
				( TGV.Bayes3$Sol[,1] + TGV.Bayes3$Sol[,3] ),#
				( TGV.Bayes3$Sol[,1] + TGV.Bayes3$Sol[,4] ),#
			( TGV.Bayes3$Sol[,1] +TGV.Bayes3$Sol[,2] +TGV.Bayes3$Sol[,4] ),#
			( TGV.Bayes3$Sol[,1] +TGV.Bayes3$Sol[,3] +TGV.Bayes3$Sol[,4] ) )#
colnames(TGV.estimates) <- c('A.LH','A.M','A.S','P.LH','P.M','P.S')#
#
TGV.estimates <- FoldedNormal( TGV.estimates )#
#
# Tabulate estimates#
apply( TGV.estimates, 2, mean )#
apply( TGV.estimates, 2, Mode )#
apply( TGV.estimates, 2, hpd )
summaty(gmax)
summary(gmax)
with( gmax, by( filename, list(taxon2, trait.type), length ) )
TGV.Bayes3 <- MCMCglmm(TGV ~ 1 + trait.type + taxon2 + trait.no, nitt=100000, burnin=5000, thin=30, data=gmax, verbose=F, random= ~ idh(trait.type):study.code + species, prior= myprior3 )
TGV.estimates <- cbind( TGV.Bayes3$Sol[,1],#
				( TGV.Bayes3$Sol[,1] + TGV.Bayes3$Sol[,2] ),#
				( TGV.Bayes3$Sol[,1] + TGV.Bayes3$Sol[,3] ),#
				( TGV.Bayes3$Sol[,1] + TGV.Bayes3$Sol[,4] ),#
			( TGV.Bayes3$Sol[,1] +TGV.Bayes3$Sol[,2] +TGV.Bayes3$Sol[,4] ),#
			( TGV.Bayes3$Sol[,1] +TGV.Bayes3$Sol[,3] +TGV.Bayes3$Sol[,4] ) )#
colnames(TGV.estimates) <- c('A.LH','A.M','A.S','P.LH','P.M','P.S')#
#
TGV.estimates <- FoldedNormal( TGV.estimates )#
#
# Tabulate estimates#
apply( TGV.estimates, 2, mean )#
apply( TGV.estimates, 2, Mode )#
apply( TGV.estimates, 2, hpd )
AEvo.Bayes3 <- MCMCglmm(AEvo ~ 1 + trait.type + taxon2 + trait.no, nitt=100000, burnin=5000, thin=30, data=gmax, verbose=F, random= ~ idh(trait.type):study.code + species, prior= myprior3 )
AEvo.estimates <- cbind( AEvo.Bayes3$Sol[,1],#
				( AEvo.Bayes3$Sol[,1] + AEvo.Bayes3$Sol[,2] ),#
				( AEvo.Bayes3$Sol[,1] + AEvo.Bayes3$Sol[,3] ),#
				( AEvo.Bayes3$Sol[,1] + AEvo.Bayes3$Sol[,4] ),#
			( AEvo.Bayes3$Sol[,1] +AEvo.Bayes3$Sol[,2] +AEvo.Bayes3$Sol[,4] ),#
			( AEvo.Bayes3$Sol[,1] +AEvo.Bayes3$Sol[,3] +AEvo.Bayes3$Sol[,4] ) )#
#
AEvo.estimates <- FoldedNormal( AEvo.estimates )#
#
colnames(AEvo.estimates) <- c('A.LH','A.M','A.S','P.LH','P.M','P.S')#
#
# Tabulate estimates#
apply( AEvo.estimates, 2, mean )#
apply( AEvo.estimates, 2, Mode )#
apply( AEvo.estimates, 2, hpd )
AEvo.Bayes0 <- MCMCglmm(AEvo ~ 1, nitt=500000, burnin=1000, thin=30, data=gmax, verbose=F, random= ~ idh(trait.type):study.code + species, prior= myprior3 )#
summary( AEvo.Bayes0 )$solutions#
            # post.mean   l-95% CI u-95% CI eff.samp    pMCMC#
# (Intercept) 0.3355777 -0.6093231 1.283184    16634 0.488758#
#
AEvoB0 <- rfnorm( length( AEvo.Bayes0$Sol[,1] ), mean( AEvo.Bayes0$Sol[,1] ), sd( AEvo.Bayes0$Sol[,1] ) )#
mean( AEvoB0 )	;	hpd( AEvoB0 ) 		 ;		 Mode( AEvoB0 )
hpd( AEvoB0 )
setwd("/Users/Will/Documents/=WORK=/BreedersEquationReview/Gmats_Cor_as_CSVs/")#
#
matrices <- dir()#
no.mats <- length(matrices)#
#
REV <- numeric(no.mats)#
Even <- numeric(no.mats)#
Evar <- numeric(no.mats)#
Gmax <- numeric(no.mats)#
matdim <- numeric(no.mats)#
#
for (i in 1:no.mats) {#
	cor.matrix <- as.matrix(read.csv(matrices[i]))#
	# cor.matrix <- ifelse( cor.matrix > 1, 1, cor.matrix ) #correct any >1 values#
	diag.matrix <- svd( cor.matrix )#
	eigen.values <- diag.matrix$d#
	Gmax[i] <- eigen.values[1]#
	matdim[i] <- length(eigen.values)#
	Evar[i] <- sum( (eigen.values - 1 )^2 ) / length(eigen.values)#
	REV[i] <- Evar[i] / ( length(eigen.values) -1 )#
	lamda_tilde <- abs(eigen.values) / sum( abs(eigen.values) )#
	Even[i] <- - sum( lamda_tilde*log(lamda_tilde) / log( length(eigen.values) ) )#
	}#
filename <- sub(".csv", "", matrices)#
REV.mats <- data.frame( REV, Even, Evar, Gmax, filename, matdim )#
#
g.cor <- merge( Index, REV.mats, "filename" )#
#
str(g.cor)#
#
# check for weird values#
plot( REV, Evar ) ; identify( REV, Evar )	# check 145, 168#
plot( matdim, Evar ) ; identify( matdim, Evar )#
plot( matdim, Gmax )#
#
# exclude McGuigan.et.al.2005, McGuigan.2006.MolEco, House.Simmons.2005.JEB and Petfield.et.al.2005.PNAS for >1 correlations#
g.cor <- g.cor[ g.cor$study.code != "McG2005" ,]#
g.cor <- g.cor[ g.cor$study.code != "McG2006" ,]#
g.cor <- g.cor[ g.cor$study.code != "Pet2005" ,]#
g.cor <- g.cor[ g.cor$study.code != "Hou2005" ,]#
#
# exclude matrices with problematic units (e.g. mm^2)#
g.cor <- g.cor[ g.cor$problem.units == "N", ]
with( g.cor, by( filename, list(taxon2, trait.type), length ) )
dim( g.cor )
myprior1 <- list(R = list(V =1, nu = 0.002), G= list( G1= list (V=1, nu=0.002)))#
#
myprior2 <- list(R = list(V =1, nu = 0.002), G= list( G1= list (V=1, nu=0.002), G2= list (V=1, nu=0.002)))#
#
myprior3 <- list( list(V=1, nu=0.002), list( G1=list(V=1, nu=0.002), G2=list(V=1, nu=0.002), G3=list(V=1, nu=0.002) ) )
REV.Bayes0 <- MCMCglmm(REV ~ 1, nitt=100000, burnin=5000, thin=30, data=g.cor, verbose=F, random= ~ study.code, prior= myprior1 )
mean( REV.Bayes0$Sol ) ; Mode( REV.Bayes0$Sol )	; hpd( REV.Bayes0$Sol )
REV.Bayes1 <- MCMCglmm(REV ~ 1 + trait.type + taxon2 + matdim, nitt=100000, burnin=5000, thin=30, data=g.cor, verbose=F, random= ~ study.code, prior= myprior1 )
REV.estimates <- cbind( REV.Bayes1$Sol[,1],#
				( REV.Bayes1$Sol[,1] + REV.Bayes1$Sol[,2] ),#
				( REV.Bayes1$Sol[,1] + REV.Bayes1$Sol[,3] ),#
				( REV.Bayes1$Sol[,1] + REV.Bayes1$Sol[,4] ),#
				( REV.Bayes1$Sol[,1] +REV.Bayes1$Sol[,2] +REV.Bayes1$Sol[,4] ),#
				( REV.Bayes1$Sol[,1] +REV.Bayes1$Sol[,3] +REV.Bayes1$Sol[,4] ))#
#
REV.estimates <- FoldedNormal( REV.estimates )#
#
colnames( REV.estimates ) <- c('A.LH','A.M','A.S','P.LH','P.M','P.S')#
#
apply( REV.estimates, 2, mean )#
apply( REV.estimates, 2, Mode )#
apply( REV.estimates, 2, hpd )
Evar.Bayes0 <- MCMCglmm(Evar ~ 1, nitt=100000, burnin=5000, thin=30, data=g.cor, verbose=F, random= ~ study.code, prior= myprior1 )
mean( Evar.Bayes0$Sol) ; Mode( Evar.Bayes0$Sol ) ; hpd( Evar.Bayes0$Sol)
Evar.Bayes1 <- MCMCglmm(Evar ~ 1 + trait.type + taxon2 + matdim, nitt=100000, burnin=5000, thin=30, data=g.cor, verbose=F, random= ~ study.code, prior= myprior1 )
Evar.estimates <- cbind( Evar.Bayes1$Sol[,1],#
				( Evar.Bayes1$Sol[,1] + Evar.Bayes1$Sol[,2] ),#
				( Evar.Bayes1$Sol[,1] + Evar.Bayes1$Sol[,3] ),#
				( Evar.Bayes1$Sol[,1] + Evar.Bayes1$Sol[,4] ),#
				( Evar.Bayes1$Sol[,1] +Evar.Bayes1$Sol[,2] +Evar.Bayes1$Sol[,4] ),#
				( Evar.Bayes1$Sol[,1] +Evar.Bayes1$Sol[,3] +Evar.Bayes1$Sol[,4] ))#
#
Evar.estimates <- FoldedNormal( Evar.estimates )#
#
colnames( Evar.estimates ) <- c('A.LH','A.M','A.S','P.LH','P.M','P.S')#
#
apply( Evar.estimates, 2, mean )#
apply( Evar.estimates, 2, Mode )#
apply( Evar.estimates, 2, hpd )
Even.Bayes0 <- MCMCglmm(Even ~ 1, nitt=100000, burnin=5000, thin=30, data=g.cor, verbose=F, random= ~ study.code, prior= myprior1 )
mean(Even.Bayes0) ; mode(Even.Bayes0) ; hpd(Even.Bayes0)
mean(Even.Bayes0$sol) ; mode(Even.Bayes0) ; hpd(Even.Bayes0)
mean(Even.Bayes0$sol)
mean(Even.Bayes0$Sol)
mean(Even.Bayes0$Sol) ; mode(Even.Bayes0$Sol) ; hpd(Even.Bayes0$Sol)
mean(Even.Bayes0$Sol) ; Mode(Even.Bayes0$Sol) ; hpd(Even.Bayes0$Sol)
Even.Bayes1 <- MCMCglmm(Even ~ 1 + trait.type + taxon2 + matdim, nitt=100000, burnin=5000, thin=30, data=g.cor, verbose=F, random= ~ study.code, prior= myprior1 )
Even.estimates <- cbind( Even.Bayes1$Sol[,1],#
				( Even.Bayes1$Sol[,1] + Even.Bayes1$Sol[,2] ),#
				( Even.Bayes1$Sol[,1] + Even.Bayes1$Sol[,3] ),#
				( Even.Bayes1$Sol[,1] + Even.Bayes1$Sol[,4] ),#
				( Even.Bayes1$Sol[,1] +Even.Bayes1$Sol[,2] +Even.Bayes1$Sol[,4] ),#
				( Even.Bayes1$Sol[,1] +Even.Bayes1$Sol[,3] +Even.Bayes1$Sol[,4] ) )#
#
Even.estimates <- FoldedNormal( Even.estimates )#
#
colnames( Even.estimates )<-c('A.LH','A.M','A.S','P.LH','P.M','P.S')#
#
apply( Even.estimates, 2, mean )#
apply( Even.estimates, 2, Mode )#
apply( Even.estimates, 2, hpd )
